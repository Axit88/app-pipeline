AWSTemplateFormatVersion: "2010-09-09"
Description: Invoking lambda function through API gateway.

Parameters:
  S3Bucket:
    Type: String
    Default: axitsamplepipelinebucket
  S3Key:
    Type: String
    Default: archive.zip
  LambdaFunctionName:
    Type: String
    Default: defualtLambda
  RoleName:
    Type: String
    Default: defaultRole
  Runtime:
    Type: String
    Default: go1.x
  Handler:
    Type: String
    Default: main
  Subnet: 
    Type: String 
  VpcId: 
    Type: String
  SNSTopic: 
    Type: String
  LambdaSecurityGroup: 
    Type: String
    Default: LambdaSecurityGroup
    
Resources:
  IAMRoleForLambda:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Ref RoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Tags:
        - Key: env 
          Value: integration 
        - Key: application 
          Value: lambda 
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"
        - "arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonMQFullAccess"
        - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        - "arn:aws:iam::aws:policy/SecretsManagerReadWrite"
        - "arn:aws:iam::aws:policy/AmazonMSKFullAccess" 
        - "arn:aws:iam::aws:policy/AmazonVPCCrossAccountNetworkInterfaceOperations"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: !Ref Handler
      FunctionName: !Ref LambdaFunctionName
      Role: !GetAtt IAMRoleForLambda.Arn
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3Key
      TracingConfig:
        Mode: Active
      Runtime: !Ref Runtime
      Timeout: 10
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:32
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds: 
          - !Ref Subnet
      Tags:
        - Key: env 
          Value: integration 
        - Key: application 
          Value: lambda 

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Ref LambdaSecurityGroup 
      GroupDescription: Security group with ingress rule
      VpcId: !Ref VpcId 
      Tags:
        - Key: env 
          Value: integration 
        - Key: application 
          Value: lambda 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"  
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"
          
  # LambdaFunctionErrorAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmName: LambdaFunctionErrorAlarm
  #     AlarmDescription: Alarm for Lambda function errors
  #     Namespace: AWS/Lambda
  #     MetricName: Errors
  #     Dimensions:
  #       - Name: FunctionName
  #         Value: !Ref LambdaFunction
  #     Statistic: Sum
  #     Period: 300
  #     DatapointsToAlarm: 1
  #     EvaluationPeriods: 1
  #     Threshold: 2 # Count
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     AlarmActions:
  #       - !Ref SNSTopic
  
  # LambdaSlownessAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmName: LambdaSlownessAlarm
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     Namespace: AWS/Lambda
  #     MetricName: Duration
  #     Dimensions:
  #       - Name: FunctionName
  #         Value: !Ref LambdaFunction
  #     Statistic: Average
  #     Period: 60
  #     Threshold: 10000 # milliseconds
  #     DatapointsToAlarm: 1
  #     EvaluationPeriods: 1 
  #     ActionsEnabled: true
  #     AlarmActions:
  #       - !Ref SNSTopic

  # LambdaColdStartAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmName: LambdaColdStartAlarm
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     Namespace: LambdaInsights  # you have to enable lambda insight for lambda function.
  #     MetricName: init_duration  
  #     Dimensions:
  #       - Name: FunctionName
  #         Value: !Ref LambdaFunction
  #     Statistic: Average
  #     Period: 300
  #     Threshold: 1000 # milliseconds
  #     DatapointsToAlarm: 1
  #     EvaluationPeriods: 1 
  #     ActionsEnabled: true
  #     AlarmActions:
  #       - !Ref SNSTopic
  
  # LambdaMemoryUtilizationAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmName: LambdaMemoryUtilizationAlarm
  #     Metrics:
  #     - Expression: ANOMALY_DETECTION_BAND(lambda1, 1)
  #       Id: adLambda1
  #     - Id: lambda1 
  #       MetricStat:
  #         Metric:
  #           Namespace: LambdaInsights
  #           MetricName: memory_utilization
  #           Dimensions:
  #           - Name: FunctionName
  #             Value: !Ref LambdaFunction
  #         Period: 60
  #         Stat: Average 
  #     ComparisonOperator: LessThanLowerOrGreaterThanUpperThreshold
  #     ThresholdMetricId: adLambda1
  #     DatapointsToAlarm: 1
  #     EvaluationPeriods: 1 
  #     ActionsEnabled: true
  #     AlarmActions:
  #       - !Ref SNSTopic

# Outputs:
#   LambdaFunctionName:
#     Description: Lambda Function Name
#     Value: !Ref LambdaFunction
#     Export:
#       Name: LambdaFunctionName

#   LambdaFunctionArn:
#     Description: Lambda Function Arn
#     Value: !GetAtt LambdaFunction.Arn
#     Export:
#       Name: LambdaFunctionArn
      
#   IAMRoleLambda:
#     Description: Role for sample Lambda
#     Value: !Ref IAMRoleForLambda
#     Export:
#       Name: IAMRoleLambda
